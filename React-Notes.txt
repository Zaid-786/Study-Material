render means recreate or invoked

* how to install react?
    setup for react js first download node js then check below command line in your terminal that your node is installed or not.

    node 
    npm    package managers
    npx

* Create React App 
    below commands for create react app

    npx create-react-app my-app
    cd my-app
    npm start

=> for local-server start then give below commands

    npm start

=> for local-server stop then give below commands

    ctrl+c 



* noscript tag:-
    The <noscript> tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support script.
        for example,
                    <noscript>Your browser does not support JavaScript!</noscript> 


* (report file & test file)    these both files are required for testing purposes.


       object      module or library
import react from 'react';

       object           module  or library  
import reactDom from 'react-dom';



* what is react render() method?

React renders HTML to the web page by using a function called render(). The purpose of the function is to display the specified HTML code inside the specified HTML element. In the render() method, we can read props and state and return our JSX code to the root component of our app.

















* what is react ? 
    react is a javascript library for building user interfaces.


* what is JSX ?
    JSX stands for JavaScript XML. It is simply a syntax extension of JavaScript. 
    It allows us to directly write HTML in React (within JavaScript code). 
    It is easy to create a template using JSX in React, but it is not a simple template language instead it comes with the full power of JavaScript.

* Diferences between JSX and JS ?
    JS is standard javascript, JSX is an HTML-like syntax that you can use with React to (theoretically) make it easier and more intuitive to create React components.


for example:-

                function App() {
                return (
                    <div className="App">
                    <header className="App-header">
                        <img src={logo} className="App-logo" alt="logo" />
                        <p>
                        Edit <code>src/App.js</code> and save to reload.
                        </p>
                    </header>
                    </div>
                );
                }



JSX is very practical, because we can also execute any JavaScript code (logic, functions, variables, and so on) inside the HTML directly by using curly braces { }, like this:

        function App() {
        const text = 'Hello World';
        
        return (
            <div className="App">
            <p> {text} </p>
            </div>
        );
        }



Summary:-

    * HTML and component tags must always be closed < />
    * Some attributes like “class” become “className” (because class refers to JavaScript classes), “tabindex” becomes “tabIndex” and should be written camelCase
    * We can’t return more than one HTML element at once, so make sure to wrap them inside a parent tag:


  for example,

                return (
                <div>
                    <p>Hello</p>
                    <p>World</p>
                </div>
                );



or as an alternative, you can wrap them with empty tags:

            return (
            <>
                <p>Hello</p>
                <p>World</p>
            </>
            );













* Component :-
react is all about components
so,components are resuable building block in user interface(html and css with JS make a component).
and then by combining these components we built a page.

=> benefit of using components!
    1. reusability
    2.help in maintaining code 

There are mainly two components in React:

   1). Functional Components also known as Stateless component
   2). Class Component also known as Stateful component





1) Functional Components =>

 The first and recommended component type in React is functional components.
 A functional component is basically a JavaScript/ES6 function that returns a React element (JSX).
 According to React's official docs, the function below is a valid functional component:


for example,

            function Welcome(props) 
            {
                 return <h1>Hello, {props.name}</h1>;
            }


Alternatively, you can also create a functional component with the arrow function definition:

            const Welcome = (props) => { 
                
                return <h1>Hello, {props.name}</h1>; 
            }


This function is a valid React component because it accepts a single “props” (which stands for properties) object argument with data and returns a React element. — reactjs.org

To be able to use a component later, you need to first export it so you can import it somewhere else:


        function Welcome(props)
         {
            return <h1>Hello, {props.name}</h1>;
        }

        export default Welcome;


After importing it, you can call the component like in this example:

        import Welcome from './Welcome';

        function App() { 
        return (
            <div className="App">
            <Welcome />
            </div>
        );
        }


 So a Functional Component in React:
 
    . is a JavaScript/ES6 function
    . must return a React element (JSX)
    . always starts with a capital letter (naming convention)
    . takes props as a parameter if necessary




=> What are Class Components?

The second type of component is the class component.
Class components are ES6 classes that return JSX. 
Below, you see our same Welcome function, this time as a class component:

        for example no:1,

                        class Welcome extends React.Component {
                            render() {
                                return <h1>Hello, {this.props.name}</h1>;
                            }
                        }



        for example no:2,
                    supposed, we have a class component that name is Profile.js
                    when you are going to create a class component then you should import below modules (objects).
                    in class component must have render method and in this method we write our return method of JSX.

                            import React from 'react';
                            import ReactDOM from 'react-dom';


                            class Profile extends React.Component {

                                render() {
                                        
                                    return (
                                        <div>
                                        <h2> class componet example...</h2>
                                        <p>this is example of class components and must have render () method </p>
                                        </div>
                                    );
                                }
                                
                            }





Different from functional components, class components must have an additional render( ) method for returning JSX.


=> Why Use Class Components?

We used to use class components because of "state". 
In the older versions of React (version < 16.8), it was not possible to use state inside functional components.


Therefore, we needed functional components for rendering UI only, whereas we'd use class components for data management and some additional operations (like life-cycle methods). 

This has changed with the introduction of React Hooks, and now we can also use states in functional components as well. 


A Class Component:

     . is an ES6 class, will be a component once it ‘extends’ a React component.
     . takes Props (in the constructor) if needed
     . must have a render( ) method for returning JSX













* What are Props in React?

Another important concept of components is how they communicate. 
React has a special object called a prop (stands for property) which we use to transport data from one component to another.

But be careful – props only transport data in a one-way flow (only from parent to child components). 
It is not possible with props to pass data from child to parent, or to components at the same level.

Let's revisit the App( ) function above to see how to pass data with props. 

First, we need to define a props on the Welcome Component and assign a value to it:


        import Welcome from './Welcome';

        function App() { 
        return (
            <div className="App">
            <Welcome name="John"/>
            <Welcome name="Mary"/>
            <Welcome name="Alex"/>
            </div>
        );
        }



Props are custom values and they also make components more dynamic. Since the Welcome component is the child here, we need to define props on its parent (App), so we can pass the values and get the result simply by accessing the prop "name":

        function Welcome(props) {
        return <h1>Hello, {props.name}</h1>;
        }


output:-
            Hello,John
            Hello,Mary
            Hello,Alex



React Props Are Really Useful:-
So React developers use props to pass data and they're useful for this job. But what about managing data? Props are used for passing data, not for manipulating it.

NOTE:- if you want to know about diferences between functional components and class components
        https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwi43aPr8Y72AhWiBKYKHe8lAvoQFnoECAUQAQ&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fdifferences-between-functional-components-and-class-components-in-react%2F&usg=AOvVaw20_qQf2qZLtr92X-ev04_o





